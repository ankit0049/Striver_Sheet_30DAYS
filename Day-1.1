/*  
   Approach 1  : we make two Arrays 1 for the column part and anthore one 
   for  Row part and iterate over the matrix and check m[i][j]==0 if true 
   then we mention 1 in our column & row array after the Iterating 
   on Whole Array .

   Again we iterate and now we check 
   for i to n 
      for j to m 
        if (col[j]==0||row[i]==0)
         m[i][j]==0  


         but in This we take extra Space
*/  

/* Approach 2 : Previous we make two Arrays now we consider
the two array inside the matrix means 0 column as Row Array 
part and 0 row as the column array but here we make 
inside means (0 is share in both its make colision)
and disturb our ans so we conside col0 as varible and handle 
it .  

we iterate and check if m[i][j]=0
then we make  Rows=> m[0][i]=0 & Column =m[0][j]
code for the Approach 2 below.
*/  

public static void SetZero(int mat[][] // this is the n* m matrix)
{   int col0=1;
    for(int i=0;i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            if(mat[i][j]==0)
            {
                mat[i][0] = 0; 
                   if (j != 0)
                        matrix[0][j] = 0;
                    else
                        col0 = 0;
            }
        }
    }  
 
 
 // iterate & set 0 except those two arrays that taken inside 
 we handel later 

   for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (matrix[i][j] != 0) {
                    if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                        matrix[i][j] = 0;
                    }
                }
            }
        } 



          // row 
        if (matrix[0][0] == 0) {
            for (int j = 0; j < m; j++) {
                matrix[0][j] = 0;
            }
        } 
        // column
        if (col0 == 0) {
            for (int i = 0; i < n; i++) {
                matrix[i][0] = 0;
            }
        }

        return matrix;

}