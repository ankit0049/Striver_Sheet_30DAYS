Approach 1 :- 
To begin With For finding the intersection of the 
linkedlist we start to iterate on the both heads
 and count the length of both 
then we find the diffrence  of the both length.
then we set two dummys(dummy1=head1 & dummy2=head2)
 on the both heads and 
Start to move by the diffrence when any of the getting
null then we Swaped means(Head1 dummy1 == null)
then we set that dummy1 to (head2) if(head2 dummy2==null)
then we set to dummy2 = head1 likewise we iterate 
until check we get the dummy1==dummy2. 

Approach 2 :  

In this Approach We Use Slow & Fast Pointer.
we set one that move by (slow means 1 move)
and anthore one (move by 2 fast pointer)
we iterate until we get the intersection point.
(One condition If any one reach to null we again start
that pointer = respective head).

Approach 2 Code Below: 

Public stati void intersection(Node head1 , Node head2) 

{
    Node a = head1;
    Node b = head2;

    while(a!=b)
    {
        a=(a==null)?head1:a.next;
        b=(b==null)?head2:b.next;
    }
} 

Approach 1 Code : 
    // length Calculate Function
    private int getLength(ListNode head) {
        int length = 0;
        ListNode current = head;
        while (current != null) {
            length++;
            current = current.next;
        }
        return length;
    }
     // Calculate the lengths of both linked lists
        int lenA = getLength(headA);
        int lenB = getLength(headB);

        // Calculate the difference in lengths
        int diff = Math.abs(lenA - lenB);

        // Set up dummy nodes
        ListNode dummyA = headA;
        ListNode dummyB = headB;

        // Move the longer list's dummy node ahead by 'diff' steps
        if (lenA > lenB) {
            for (int i = 0; i < diff; i++) {
                dummyA = dummyA.next;
            }
        } else {
            for (int i = 0; i < diff; i++) {
                dummyB = dummyB.next;
            }
        }

        // Iterate both dummy nodes until they meet or reach the end
        while (dummyA != dummyB && dummyA != null && dummyB != null) {
            dummyA = dummyA.next;
            dummyB = dummyB.next;
        }

        // Return the intersection node (if any)
        return dummyA;