Approach 1:  Since we have sorted the intervals, 
the intervals which will be merging are bound to 
 be adjacent. We kept on merging simultaneously 
  as we were traversing through the array and when
   the element was non-overlapping we simply inserted 
   the element in our answer list.
 
 
if(matrix[i-1][1]>matrix[i][0]) then 
we consider there matrix[i][1] and place that 

value & we get updated interval  





    public static List<List<Integer>> mergeOverlappingIntervals(int[][] arr) {
        int n = arr.length; // size of the array

        // Sort the given intervals:
        Arrays.sort(arr, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[0] - b[0];
            }
        });

        List<List<Integer>> ans = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            // If the current interval does not
            // lie in the last interval:
            if (ans.isEmpty() || arr[i][0] > ans.get(ans.size() - 1).get(1)) {
                ans.add(Arrays.asList(arr[i][0], arr[i][1]));
            }
            // If the current interval
            // lies in the last interval:
            else {
                ans.get(ans.size() - 1).set(1,
                                            Math.max(ans.get(ans.size() - 1).get(1), arr[i][1]));
            }
        }
        return ans;